/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;
import beans.Bebida;
import beans.Comida;
import beans.Sobremesas;
import dao.RestauranteDAO;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
/**
 *
 * @author iagov
 */
public class Pedidos extends javax.swing.JFrame {
    private RestauranteDAO restauranteDAO;
    /**
     * Creates new form Pedidos
     */
    public Pedidos() {
        initComponents();
        restauranteDAO = new RestauranteDAO();
        configurarComponentes();
        carregarComidas();
        setSize(400, 335);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgEscolhas = new javax.swing.ButtonGroup();
        rdbComidas = new javax.swing.JRadioButton();
        rdbBebidas = new javax.swing.JRadioButton();
        rdbSobremesa = new javax.swing.JRadioButton();
        cmbPedido = new javax.swing.JComboBox<>();
        btnEnviar = new javax.swing.JButton();
        btnCardapio = new javax.swing.JButton();
        cmbMesa = new javax.swing.JComboBox<>();
        cmbQuantidade = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        btgEscolhas.add(rdbComidas);
        rdbComidas.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        rdbComidas.setText("Comida");
        rdbComidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbComidasActionPerformed(evt);
            }
        });
        getContentPane().add(rdbComidas);
        rdbComidas.setBounds(47, 40, 90, 24);

        btgEscolhas.add(rdbBebidas);
        rdbBebidas.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        rdbBebidas.setText("Bebidas");
        rdbBebidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbBebidasActionPerformed(evt);
            }
        });
        getContentPane().add(rdbBebidas);
        rdbBebidas.setBounds(150, 40, 100, 24);

        btgEscolhas.add(rdbSobremesa);
        rdbSobremesa.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        rdbSobremesa.setText("Sobremesa");
        rdbSobremesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSobremesaActionPerformed(evt);
            }
        });
        getContentPane().add(rdbSobremesa);
        rdbSobremesa.setBounds(250, 40, 105, 24);

        cmbPedido.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        cmbPedido.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cmbPedido);
        cmbPedido.setBounds(70, 89, 248, 27);

        btnEnviar.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        btnEnviar.setText("Enviar Pedido");
        btnEnviar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEnviar);
        btnEnviar.setBounds(19, 267, 130, 23);

        btnCardapio.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        btnCardapio.setText("Cardapio");
        btnCardapio.setToolTipText("");
        btnCardapio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCardapio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCardapioActionPerformed(evt);
            }
        });
        getContentPane().add(btnCardapio);
        btnCardapio.setBounds(228, 267, 120, 23);

        cmbMesa.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        cmbMesa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cmbMesa);
        cmbMesa.setBounds(42, 180, 100, 27);

        cmbQuantidade.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        cmbQuantidade.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cmbQuantidade);
        cmbQuantidade.setBounds(242, 180, 100, 27);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Restaurante.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-180, -180, 580, 480);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void configurarComponentes() {
        // Configurar combobox de mesas (1 a 3)
        for (int i = 1; i <= 3; i++) {
            cmbMesa.addItem("Mesa " + i);
        }
        
        // Configurar combobox de quantidade (1 a 4)
        for (int i = 1; i <= 4; i++) {
            cmbQuantidade.addItem(i);
        }
        
        // Selecionar comida por padrão
        rdbComidas.setSelected(true);
    }
    private void rdbComidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbComidasActionPerformed
        // TODO add your handling code here:
        if (rdbComidas.isSelected()){
            carregarComidas();
        }
    }//GEN-LAST:event_rdbComidasActionPerformed

    private void rdbBebidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbBebidasActionPerformed
        // TODO add your handling code here:
        if (rdbBebidas.isSelected()){
           carregarBebidas();
        }
    }//GEN-LAST:event_rdbBebidasActionPerformed

    private void rdbSobremesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSobremesaActionPerformed
        // TODO add your handling code here:
        if (rdbSobremesa.isSelected()){
            carregarSobremesas();
        }
    }//GEN-LAST:event_rdbSobremesaActionPerformed

    private void btnCardapioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCardapioActionPerformed
        // TODO add your handling code here:
        Cardapio cardapio = new Cardapio();
        
        cardapio.setVisible(true);
    }//GEN-LAST:event_btnCardapioActionPerformed
    private void enviarPedidoParaCozinha(String pedidoTexto) {
    new Thread(() -> {
    try (Socket socket = new Socket("10.104.0.15", 12345); // IP da Cozinha
         PrintWriter saida = new PrintWriter(socket.getOutputStream(), true)) {
        saida.println(pedidoTexto);
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao enviar pedido para a cozinha");
    }
    }).start();
}
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        String itemSelecionado = (String) cmbPedido.getSelectedItem();
        if (itemSelecionado == null || itemSelecionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione um item primeiro!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String mesaSelecionada = (String) cmbMesa.getSelectedItem();
        int numeroMesa = Integer.parseInt(mesaSelecionada.replace("Mesa ", ""));

        int quantidade = (int) cmbQuantidade.getSelectedItem();

        String nomeItem = itemSelecionado.split(" - R\\$ ")[0];
        String pedidoTexto = "Mesa " + numeroMesa + " - " + nomeItem + " x" + quantidade;

        enviarPedidoParaCozinha(pedidoTexto); 

        
        try {
            
            // Buscar ID do item no banco
            int idItem = restauranteDAO.buscarIdPorNome(nomeItem);
            
            // Inserir pedido
            boolean sucesso = restauranteDAO.inserirPedido(numeroMesa, idItem, quantidade);
            
             if (sucesso) {
                JOptionPane.showMessageDialog(this, 
                    "Pedido enviado para a cozinha!\n" +
                    "Mesa: " + numeroMesa + "\n" +
                    "Item: " + nomeItem + "\n" +
                    "Quantidade: " + quantidade,
                    "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                // Limpar seleções
                cmbPedido.setSelectedIndex(-1);
                cmbQuantidade.setSelectedIndex(0);

                // Atualizar a lista de itens
                if (rdbComidas.isSelected()) carregarComidas();
                else if (rdbBebidas.isSelected()) carregarBebidas();
                else if (rdbSobremesa.isSelected()) carregarSobremesas();
            }
            else {
                JOptionPane.showMessageDialog(this, "Erro ao enviar pedido!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEnviarActionPerformed
    private void carregarComidas() {
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    List<Comida> comidas = restauranteDAO.buscarComidas();
    
    for (Comida comida : comidas) {
        if (comida.isDisponivel()) { // Verificação adicional
            model.addElement(comida.getNome() + " - R$ " + comida.getPreco());
        }
    }
    
    cmbPedido.setModel(model);
    if (model.getSize() == 0) {
        JOptionPane.showMessageDialog(this, "Nenhuma comida disponível no momento", 
                "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }
}

    private void carregarBebidas() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        List<Bebida> bebidas = restauranteDAO.buscarBebidas();

        for (Bebida bebida : bebidas) {
            if (bebida.isDisponivel()) { // Verificação adicional
                model.addElement(bebida.getNome() + " - R$ " + bebida.getPreco());
            }
        }

        cmbPedido.setModel(model);
        if (model.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma bebida disponível no momento", 
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void carregarSobremesas() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        List<Sobremesas> sobremesas = restauranteDAO.buscarSobremesas();

        for (Sobremesas sobremesa : sobremesas) {
            if (sobremesa.isDisponivel()) { // Verificação adicional
                model.addElement(sobremesa.getNome() + " - R$ " + sobremesa.getPreco());
            }
        }

        cmbPedido.setModel(model);
        if (model.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma sobremesa disponível no momento", 
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pedidos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgEscolhas;
    private javax.swing.JButton btnCardapio;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox<String> cmbMesa;
    private javax.swing.JComboBox<String> cmbPedido;
    private javax.swing.JComboBox cmbQuantidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton rdbBebidas;
    private javax.swing.JRadioButton rdbComidas;
    private javax.swing.JRadioButton rdbSobremesa;
    // End of variables declaration//GEN-END:variables

   
}
